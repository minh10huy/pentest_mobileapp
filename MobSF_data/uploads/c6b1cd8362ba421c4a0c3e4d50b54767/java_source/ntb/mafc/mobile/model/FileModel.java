/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.SharedPreferences
 *  android.content.SharedPreferences$Editor
 *  com.google.gson.Gson
 *  com.google.gson.reflect.TypeToken
 *  fec.mobile.activity.api.FesgoAPI
 *  io.reactivex.Observable
 *  io.reactivex.Scheduler
 *  io.reactivex.android.schedulers.AndroidSchedulers
 *  io.reactivex.disposables.Disposable
 *  io.reactivex.functions.Consumer
 *  io.reactivex.schedulers.Schedulers
 *  kotlin.Metadata
 *  kotlin.TypeCastException
 *  kotlin.jvm.internal.Intrinsics
 *  ntb.mafc.mobile.manager.MainApplication
 *  ntb.mafc.mobile.manager.MainApplication$Companion
 *  ntb.mafc.mobile.model.FileModel$getCountUploadPerday
 *  ntb.mafc.mobile.model.FileModel$getListFile
 *  ntb.mafc.mobile.model.FileModel$getListFile$listType
 *  ntb.mafc.mobile.model.FileModel$getListFileFromServer
 *  ntb.mafc.mobile.model.FileModel$uploadFileZip
 *  ntb.mafc.mobile.model.FileModel$uploadHardQDE
 *  ntb.mafc.mobile.model.FileModel$uploadSoftQDE
 *  okhttp3.MultipartBody
 *  okhttp3.MultipartBody$Part
 *  okhttp3.RequestBody
 *  org.jetbrains.annotations.NotNull
 *  org.jetbrains.annotations.Nullable
 *  org.json.JSONArray
 *  org.json.JSONException
 *  org.json.JSONObject
 *  retrofit2.Retrofit
 */
package ntb.mafc.mobile.model;

import android.content.Context;
import android.content.SharedPreferences;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import fec.mobile.activity.api.FesgoAPI;
import io.reactivex.Observable;
import io.reactivex.Scheduler;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;
import java.io.File;
import java.lang.reflect.Type;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import kotlin.Metadata;
import kotlin.TypeCastException;
import kotlin.collections.ArraysKt;
import kotlin.io.FilesKt;
import kotlin.jvm.internal.Intrinsics;
import kotlin.text.StringsKt;
import ntb.mafc.mobile.entity.FileEntity;
import ntb.mafc.mobile.entity.Status;
import ntb.mafc.mobile.manager.MainApplication;
import ntb.mafc.mobile.model.FileModel;
import ntb.mafc.mobile.view.FileView;
import ntb.mafc.mobile.view.UploadInterface;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import retrofit2.Retrofit;

@Metadata(bv={1, 0, 2}, d1={"\u0000`\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\t\n\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0010!\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0003\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\r\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\f\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u0010\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0004H\u0002J\u001d\u0010\u0006\u001a\u00020\u00072\u0006\u0010\b\u001a\u00020\t2\b\u0010\n\u001a\u0004\u0018\u00010\u000b\u00a2\u0006\u0002\u0010\fJ\u0010\u0010\r\u001a\u00020\u000e2\u0006\u0010\u000f\u001a\u00020\u0010H\u0002J\u0010\u0010\u0011\u001a\n\u0012\u0004\u0012\u00020\u0010\u0018\u00010\u0012H\u0002J\u001c\u0010\u0013\u001a\u00020\u00072\b\u0010\u0014\u001a\u0004\u0018\u00010\u00152\b\u0010\u0016\u001a\u0004\u0018\u00010\u0017H\u0002J\u001a\u0010\u0018\u001a\u00020\u00072\b\u0010\u0019\u001a\u0004\u0018\u00010\u00102\b\u0010\u0014\u001a\u0004\u0018\u00010\u0015J\b\u0010\u001a\u001a\u00020\u0010H\u0002J\f\u0010\u001b\u001a\b\u0012\u0004\u0012\u00020\u001c0\u0012J\u0010\u0010\u001d\u001a\u00020\u00072\u0006\u0010\u001e\u001a\u00020\u0010H\u0002J\u000e\u0010\u001f\u001a\u00020\u00072\u0006\u0010 \u001a\u00020\u0010J\u0006\u0010!\u001a\u00020\u0007J\u000e\u0010\"\u001a\u00020\u00072\u0006\u0010#\u001a\u00020\u001cJ\u0012\u0010$\u001a\u00020\u00072\b\u0010%\u001a\u0004\u0018\u00010\u0010H\u0002J\u0010\u0010&\u001a\u00020\u00072\u0006\u0010'\u001a\u00020\u0010H\u0002JN\u0010(\u001a\u00020\u00072\u0006\u0010\b\u001a\u00020\t2\u0006\u0010)\u001a\u00020*2\u0006\u0010+\u001a\u00020,2\u0006\u0010-\u001a\u00020,2\u0006\u0010.\u001a\u00020,2\u0006\u0010/\u001a\u00020,2\u0006\u00100\u001a\u00020,2\u0006\u00101\u001a\u00020,2\u0006\u00102\u001a\u00020,Jx\u00103\u001a\u00020\u00072\u0006\u0010\b\u001a\u00020\t2\u0006\u0010)\u001a\u00020*2\b\u0010+\u001a\u0004\u0018\u00010,2\b\u0010-\u001a\u0004\u0018\u00010,2\b\u0010.\u001a\u0004\u0018\u00010,2\b\u0010/\u001a\u0004\u0018\u00010,2\b\u00100\u001a\u0004\u0018\u00010,2\b\u00101\u001a\u0004\u0018\u00010,2\u0006\u00102\u001a\u00020,2\b\u00104\u001a\u0004\u0018\u00010,2\b\u00105\u001a\u0004\u0018\u00010,2\b\u00106\u001a\u0004\u0018\u00010,Jh\u00107\u001a\u00020\u00072\u0006\u0010\b\u001a\u00020\t2\b\u0010+\u001a\u0004\u0018\u00010\u00102\b\u0010-\u001a\u0004\u0018\u00010\u00102\b\u0010.\u001a\u0004\u0018\u00010\u00102\b\u0010/\u001a\u0004\u0018\u00010\u00102\b\u00100\u001a\u0004\u0018\u00010\u00102\b\u00101\u001a\u0004\u0018\u00010\u00102\b\u00104\u001a\u0004\u0018\u00010\u00102\b\u00105\u001a\u0004\u0018\u00010\u00102\b\u00106\u001a\u0004\u0018\u00010\u0010\u00a8\u00068"}, d2={"Lntb/mafc/mobile/model/FileModel;", "", "()V", "checkSaturdayAndSunDay", "", "currentDay", "getCountUploadPerday", "", "uploadInterface", "Lntb/mafc/mobile/view/UploadInterface;", "isDefer", "", "(Lntb/mafc/mobile/view/UploadInterface;Ljava/lang/Boolean;)V", "getDifferenceDate", "", "strDate", "", "getListDocumentUploaded", "", "getListFile", "fileView", "Lntb/mafc/mobile/view/FileView;", "t", "", "getListFileFromServer", "groupName", "getListFileUpload", "getListFileWaitingUploaded", "Ljava/io/File;", "removeAfterThreeDay", "data", "removeFileUploadedWhenDeferSuccess", "nameFolderDefer", "saveCountDay", "saveFileUploadToJSON", "file", "saveListFile", "json", "setListFileUpload", "listjson", "uploadFileZip", "filzip", "Lokhttp3/MultipartBody$Part;", "ccCode", "Lokhttp3/RequestBody;", "ccChannel", "cus_id", "cus_name", "latitude", "longitude", "upType", "uploadHardQDE", "reason", "idf1", "management_id", "uploadSoftQDE", "app_release"}, k=1, mv={1, 1, 11})
public final class FileModel {
    public static final /* synthetic */ void access$getListFile(FileModel fileModel, @Nullable FileView fileView, @Nullable Throwable throwable) {
        fileModel.getListFile(fileView, throwable);
    }

    public static final /* synthetic */ void access$saveListFile(FileModel fileModel, @Nullable String string2) {
        fileModel.saveListFile(string2);
    }

    private final int checkSaturdayAndSunDay(int n) {
        if (n != 1 && n != 7) {
            return 0;
        }
        return -1;
    }

    private final long getDifferenceDate(String object) {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
        Date date = null;
        Date date2 = new Date();
        try {
            object = simpleDateFormat.parse((String)object);
        }
        catch (ParseException parseException) {
            parseException.printStackTrace();
            object = date;
        }
        long l = date2.getTime();
        if (object == null) {
            Intrinsics.throwNpe();
        }
        long l2 = object.getTime();
        long l3 = 60;
        return (l - l2) / (1000L * l3 * l3 * (long)24);
    }

    private final List<String> getListDocumentUploaded() {
        String string2 = this.getListFileUpload();
        List list = new ArrayList();
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.CharSequence");
        }
        if (Intrinsics.areEqual((Object)StringsKt.trim((CharSequence)string2).toString(), (Object)"") ^ true) {
            string2 = new JSONArray(string2);
            int n = string2.length();
            for (int i = 0; i < n; ++i) {
                Object object = string2.getJSONObject(i);
                if (list == null) continue;
                object = object.getString("path");
                Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"jsonObject.getString(\"path\")");
                list.add(object);
            }
        }
        return list;
    }

    private final void getListFile(FileView fileView, Throwable object) {
        String string2 = MainApplication.Companion.applicationContext().getSharedPreferences("listfile", 0).getString("listdata", "");
        Type type = new TypeToken<List<FileEntity>>(){}.getType();
        if (string2 != null && string2.hashCode() == 0 && string2.equals("")) {
            if (fileView != null) {
                object = object != null ? object.getMessage() : null;
                fileView.uploadFaile((String)object);
                return;
            }
        } else {
            object = (List)new Gson().fromJson(string2, type);
            if (fileView != null) {
                fileView.showListDocument((List<FileEntity>)object);
            }
        }
    }

    private final String getListFileUpload() {
        String string2 = MainApplication.Companion.applicationContext().getSharedPreferences("listfileupload", 0).getString("listfile", "");
        Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"MainApplication.applicat\u2026getString(\"listfile\", \"\")");
        return string2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void removeAfterThreeDay(String string2) {
        Calendar calendar;
        JSONArray jSONArray;
        int n;
        int n2;
        int n3;
        int n4;
        try {
            string2 = new JSONArray(string2);
            jSONArray = new JSONArray();
            n = string2.length();
            calendar = Calendar.getInstance();
            calendar.add(5, -1);
            n3 = calendar.get(7);
            calendar = Calendar.getInstance();
            calendar.add(5, -2);
            n2 = calendar.get(7);
            n3 = this.checkSaturdayAndSunDay(n3);
            n4 = this.checkSaturdayAndSunDay(n2);
            n2 = 0;
        }
        catch (Exception exception) {
            return;
        }
        do {
            if (n2 >= n) {
                string2 = jSONArray.toString();
                Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"tempJSONArray.toString()");
                this.setListFileUpload(string2);
                return;
            }
            calendar = string2.getJSONObject(n2);
            String string3 = calendar.getString("path");
            String string4 = calendar.getString("dateupload");
            Intrinsics.checkExpressionValueIsNotNull((Object)string4, (String)"jsonObject.getString(\"dateupload\")");
            if (this.getDifferenceDate(string4) + (long)(n3 + n4 + 0) <= (long)3) {
                jSONArray.put((Object)calendar);
            } else {
                FilesKt.deleteRecursively(new File(string3));
            }
            ++n2;
        } while (true);
    }

    private final void saveListFile(String string2) {
        MainApplication.Companion.applicationContext().getSharedPreferences("listfile", 0).edit().putString("listdata", string2).apply();
    }

    private final void setListFileUpload(String string2) {
        MainApplication.Companion.applicationContext().getSharedPreferences("listfileupload", 0).edit().putString("listfile", string2).apply();
    }

    public final void getCountUploadPerday(@NotNull UploadInterface uploadInterface, @Nullable Boolean object) {
        Intrinsics.checkParameterIsNotNull((Object)uploadInterface, (String)"uploadInterface");
        SharedPreferences sharedPreferences = MainApplication.Companion.applicationContext().getSharedPreferences("userinfo", 0);
        Object object2 = Calendar.getInstance();
        Intrinsics.checkExpressionValueIsNotNull((Object)object2, (String)"Calendar.getInstance()");
        object2 = object2.getTime();
        object2 = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH).format((Date)object2);
        if (object == null) {
            Intrinsics.throwNpe();
        }
        object = object.booleanValue() ? "HOSOBOSUNG" : "HOSOMOI";
        ((FesgoAPI)MainApplication.Companion.getClient().create(FesgoAPI.class)).getNumberUploadNewAppAndQDE(sharedPreferences.getString("username", ""), (String)object2, (String)object).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe((Consumer)}
    java.lang.IllegalStateException: Inner class got unexpected class file - revert this change
    
    